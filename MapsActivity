package alex.corak.acoraklab8;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.os.Handler;
import android.os.PersistableBundle;
import android.provider.Settings;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

import java.util.ArrayList;

public class MapsActivity extends AppCompatActivity implements OnMapReadyCallback, View.OnLongClickListener
{

    private static int PERMISSION_REQUEST = 1000;
    private GoogleMap mMap;
    private int markerCount = 0;
    private float zoom=0;
    private ArrayList<MarkerOptions> list = new ArrayList<MarkerOptions>();
    private ArrayList<Marker> markerList = new ArrayList<Marker>();


    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);

        findViewById(R.id.markButton).setOnLongClickListener(this);

        mapFragment.getMapAsync(this);
        if(savedInstanceState!=null)
        {
            this.list = (ArrayList<MarkerOptions>) savedInstanceState.getSerializable("List");
            this.zoom = savedInstanceState.getFloat("Zoom Level");
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        Toast.makeText(this, "Lab 8, Winter 2019, Alex Corak", Toast.LENGTH_SHORT).show();
        return true;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }


    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        initMap();
    }

    private void initMap() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, PERMISSION_REQUEST);
            return;
        }
        this.mMap.setMyLocationEnabled(true);
        mMap.getUiSettings().setZoomControlsEnabled(true);

        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                Location location = getLocation() ;
                if (location!=null) {
                    moveToLocation(location);
                }
                else
                    Toast.makeText(getApplicationContext(),
                            "No Location, try the zoom to button", Toast.LENGTH_SHORT).show();
            }
        };
        Handler handler = new Handler();
        handler.postDelayed(runnable, 750);

        for(MarkerOptions mark : this.list)
        {
            markerList.add(mMap.addMarker(mark));
        }
        mMap.moveCamera(CameraUpdateFactory.zoomBy(zoom));

    }

    private void moveToLocation(Location location)
    {
        LatLng latlng = new LatLng(location.getLatitude(),location.getLongitude());
        //CameraUpdateFactory.newLatLngZoom(latlng,12f);
        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latlng,11f));
    }

    private Location getLocation() {
        LocationManager locMgr = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
// if we have a map (class Map), try getting it from there (this is still there,
// but deprecated, no longer documented, and appears to no longer work)
        Location location = mMap.getMyLocation();
        String provider;
// if that fails, try using a FINE Criteria
        if (location==null) {
            provider = getProvider(locMgr, Criteria.ACCURACY_FINE, locMgr.GPS_PROVIDER);
            try {
                location = locMgr.getLastKnownLocation(provider) ;
            } catch(SecurityException e) {
                Log.e("ERROR", "Security Exception: "+e.getMessage());
            }
        }
// if FINE failed, try COARSE
        if (location==null) {
            provider = getProvider(locMgr, Criteria.ACCURACY_COARSE, locMgr.NETWORK_PROVIDER);
            try {
                location = locMgr.getLastKnownLocation(provider) ;
            } catch(SecurityException e) {
                Log.e("ERROR", "Security Exception: "+e.getMessage());
            }
        }
        return location;
    }

    private String getProvider(LocationManager locMgr, int locAccuracy, String
            defProvider)
    {
        Criteria criteria = new Criteria() ;
        criteria.setAccuracy(Criteria.ACCURACY_COARSE);
// get best provider regardless of whether it is enabled
        String providerName = locMgr.getBestProvider(criteria, false) ;
        if (providerName == null)
            providerName = defProvider ;

        return providerName ;
    }

    @Override
    public void onRequestPermissionsResult(int rqst, String perms[], int[] res){
        if (rqst == PERMISSION_REQUEST)
        {
            if (res.length>0 && res[0] == PackageManager.PERMISSION_GRANTED)
                initMap();
            else
                Toast.makeText(this, "This app is useless without loc permissions",
                        Toast.LENGTH_SHORT).show();
        }
    }

    public void onTerrainClick(View v)
    {
        int mapType = mMap.getMapType();
        if(mapType == mMap.MAP_TYPE_NORMAL)
            this.mMap.setMapType(mMap.MAP_TYPE_SATELLITE);
        if(mapType == mMap.MAP_TYPE_SATELLITE)
            this.mMap.setMapType(mMap.MAP_TYPE_TERRAIN);
        if(mapType == mMap.MAP_TYPE_TERRAIN)
            this.mMap.setMapType(mMap.MAP_TYPE_NORMAL);
    }

    public void onMarkClick(View v)
    {
        Location cur = getLocation();
        LatLng gps = new LatLng(cur.getLatitude(), cur.getLongitude());
        this.markerCount++;
        MarkerOptions options = new MarkerOptions();
        options.title("Marker #"+this.markerCount);
        options.position(gps);
        BitmapDescriptor a = BitmapDescriptorFactory.fromResource(R.drawable.pushpin);
        options.icon(a);
        list.add(options);
        markerList.add(mMap.addMarker(options));
    }



    @Override
    public void onSaveInstanceState(Bundle outState) {
        outState.putSerializable("List",this.list);
        outState.putFloat("Zoom Level",mMap.getCameraPosition().zoom);
        super.onSaveInstanceState(outState);
    }

    @Override
    public boolean onLongClick(View v)
    {
        if(!markerList.isEmpty()) {
            Marker toDelete = markerList.remove(markerList.size() - 1);
            list.remove(list.size()-1);
            toDelete.remove();
            return true;
        }

        return true;
    }
}
